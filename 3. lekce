--3. lekce

--Cvičení: Funkce COUNT()
--Úkol 1: Spočítejte počet řádků v tabulce czechia_price.

SELECT 
COUNT(*)
FROM czechia_price cp;

--Úkol 2: Spočítejte počet řádků v tabulce czechia_payroll s konkrétním sloupcem jako argumentem funkce count().

SELECT  
COUNT(cp.id ) AS rows_count
FROM czechia_payroll cp ;
-- 6880

SELECT  
COUNT(value) AS rows_count
FROM czechia_payroll cp ;
-- 3784 - nepočítá to prázdné (null) hodnoty

-- Úkol 3: Z kolika záznamů v tabulce czechia_payroll jsme schopni vyvodit průměrné počty zaměstnanců?

SELECT 
COUNT(cp.value ) AS rows_of_know_employees
FROM czechia_payroll cp 
WHERE cp.value_type_code = 316


SELECT * 
FROM czechia_payroll_value_type cpvt 

-- Úkol 4: Vypište všechny cenové kategorie a počet řádků každé z nich v tabulce czechia_price.

SELECT 
	cp.category_code
	,count(id) AS row_in_category
FROM czechia_price cp 
GROUP BY cp.category_code ;

-- Úkol 5: Rozšiřte předchozí dotaz o dodatečné rozdělení dle let měření.

SELECT 
	cp.category_code
	,date_part('year', cp.date_from) AS year_of_entry
	,count(id) AS row_in_category
FROM czechia_price cp 
GROUP BY cp.category_code, year_of_entry ;


SELECT 
	cp.category_code
	,cp.date_from 
	,date_part('year', cp.date_from) AS year_of_entry
	,date_part('month', cp.date_from)
	,date_trunc('month', cp.date_from)
	,date_trunc('year', cp.date_from)
	,date_trunc('hour', cp.date_from)
FROM czechia_price cp 


--Cvičení: Funkce SUM()

--Úkol 1: Sečtěte všechny průměrné počty zaměstnanců v datové sadě průměrných platů v České republice.

SELECT 
SUM(value) AS value_sum
FROM czechia_payroll cp 
WHERE cp.value_type_code = 316

-- Úkol 2: Sečtěte průměrné ceny pro jednotlivé kategorie pouze v Jihomoravském kraji.

SELECT 
	cp.category_code 
	,sum(value) AS sum_of_avg_prices
FROM czechia_price cp 
WHERE cp.region_code = 'CZ064'
GROUP BY 
	category_code 

-- Úkol 3: Sečtěte průměrné ceny potravin za všechny kategorie, u kterých měření probíhalo od (date_from) 15. 1. 2018.
	
SELECT 
	sum(value) AS sum_of_avg_prices
FROM czechia_price cp 
WHERE 
	date_from::date = '2018-01-15'

-- Úkol 4: Vypište tři sloupce z tabulky czechia_price: kód kategorie, počet řádků pro ni a sumu hodnot průměrných cen. To vše pouze pro data v roce 2018.
	
SELECT 
	cp.category_code 
	,count(*) AS row_count
	,sum(value) AS sum_of_avg_prices
FROM czechia_price cp 
WHERE 
	date_part('year', date_from) = 2018
GROUP BY 
	category_code 
	
SELECT *
FROM czechia_price cp 
WHERE 
	cp.category_code ='2000001' 
	AND date_part('year', date_from) = 2018
	

--Cvičení: Další agregační funkce

--Úkol 1: Vypište maximální hodnotu průměrné mzdy z tabulky czechia_payroll.

SELECT 
	max(value)
FROM czechia_payroll cp 
WHERE 
	cp.value_type_code = 5958
	
-- Úkol 2: Na základě údajů v tabulce czechia_price vyberte pro každou kategorii potravin její minimum v letech 2015 až 2017.
	
SELECT cp.category_code 
, min(value)
FROM czechia_price cp 
WHERE date_part('year', date_from) >= 2015
AND date_part('year', date_from) <= 2017
GROUP BY category_code 

SELECT cp.category_code 
, min(value)
FROM czechia_price cp 
WHERE date_part('year', date_from) BETWEEN 2015 AND 2017
GROUP BY category_code 

-- Úkol 3: Vypište kód (případně i název) odvětví s historicky nejvyšší průměrnou mzdou.


SELECT 
	max(value)
FROM czechia_payroll cp 
WHERE 
	cp.value_type_code = 5958
	
SELECT cp.industry_branch_code 
FROM czechia_payroll cp 
WHERE value IN(SELECT 
	max(value)
FROM czechia_payroll cp 
WHERE 
	cp.value_type_code = 5958)
	
	
/* Úkol 4: Pro každou kategorii potravin určete její minimum, maximum a vytvořte nový sloupec s názvem difference, 
ve kterém budou hodnoty "rozdíl do 10 Kč", "rozdíl do 40 Kč" a "rozdíl nad 40 Kč" 
na základě rozdílu minima a maxima. Podle tohoto rozdílu data seřaďte.
*/


SELECT 
cp.category_code 
, min(value)
, max (value)
, max(value) - min(value) AS diff_min_max
,CASE 
	WHEN max(value) - min(value) < 10 THEN 'rozdíl do 10 Kč'
	WHEN max(value) - min(value) < 40 THEN 'rozdíl do 40 Kč'
	ELSE 'rozdíl nad 40 Kč'
END AS diff
FROM czechia_price cp 
GROUP BY 
	cp.category_code 
ORDER BY 
	diff_min_max ASC
	
/*
Úkol 5: Vyberte pro každou kategorii potravin minimum, 
maximum a aritmetický průměr (v našem případě průměr z průměrů) 
zaokrouhlený na dvě desetinná místa.
*/

	
SELECT 
	cp.category_code 
	, min(value)
	, max (value)
	, avg(value)
	, round(avg(value)::numeric, 2) AS average
FROM czechia_price cp 
GROUP BY 
	cp.category_code 

	
--  Úkol 6: Rozšiřte předchozí dotaz tak, že data budou rozdělena i podle kódu kraje a seřazena sestupně podle aritmetického průměru.

	
SELECT 
	cp.category_code 
	, region_code
	, min(value)
	, max (value)
	, avg(value)
	, round(avg(value)::numeric, 2) AS average
FROM czechia_price cp 
GROUP BY 
	cp.category_code 
	, region_code
ORDER BY average desc


-- Cvičení: Další operace v klauzuli SELECT

-- Úkol 1: Vyzkoušejte si následující dotazy. Co vypisují a proč?

SELECT SQRT(-16);
SELECT 10/0;

SELECT FLOOR(1.56);
SELECT FLOOR(-1.56);

SELECT CEIL(1.56);
SELECT CEIL(-1.56);

SELECT ROUND(1.56);
SELECT ROUND(-1.56);

-- Úkol 2: Vypočítejte průměrné ceny kategorií potravin bez použití funkce AVG() s přesností na dvě desetinná místa.

SELECT
    category_code,
    ROUND((SUM(value) / COUNT(value))::numeric, 2) AS average_price
FROM czechia_price
GROUP BY category_code
ORDER BY average_price;


-- Úkol 3: Jaké datové typy budou mít hodnoty v následujících dotazech?

SELECT 1;
SELECT 1.0;
SELECT 1 + 1;
SELECT 1 + 1.0;
SELECT 1 + '1';
SELECT 1 + 'a';
SELECT 1 + '12tatata';

-- Úkol 4: Vyzkoušejte si spustit dotazy, jež operují s textovými řetězci.

SELECT CONCAT('Ahoj, ', 'jsem Engeto student!');


SELECT CONCAT('Máme ', COUNT(DISTINCT category_code), ' cenových kategorií.') AS info
FROM czechia_price;

SELECT name,
    substring(name FOR 2) AS prefix,
    substring(name FROM '..$') AS prefix,
    length(name)
FROM czechia_price_category;

-- Úkol 5: Vyzkoušejte si operátor modulo (zbytek po celočíselném dělení).

SELECT 5 % 2;
SELECT 14 % 5;
SELECT 15 % 5;

--Na co se používá dělitelnost jedenácti?
SELECT 123456789874 % 11;
SELECT 123456759874 % 11;

-- Úkol 6: Využijte operátor modulo na zjištění sudosti populace v tabulce economies.

SELECT * 
FROM economies e 

-- Populace - zbytek po dělení dvěma:
SELECT
    country, year, population, population::bigint % 2 AS division_rest
FROM economies e
WHERE population IS NOT NULL;

--Populace - flag zda je sudá:
SELECT 
    country, year, population, population::bigint % 2 AS is_even
FROM economies e 
WHERE population IS NOT NULL;

--Populace - flag zda je sudá se selekcí:
SELECT 
    country, year, population, population::bigint % 2 AS is_even 
FROM economies e
WHERE population IS NOT NULL AND population::bigint % 2 = 0;
